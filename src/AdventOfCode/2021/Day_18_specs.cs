namespace Advent_of_Code_2021;

public partial class Day_18
{
    [TestCase(143, "[[1,2],[[3,4],5]]")]
    [TestCase(1384, "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")]
    [TestCase(445, "[[[[1,1],[2,2]],[3,3]],[4,4]]")]
    public void Has_Magnitude(int magnitude, string expression)
       => Pair.Parse(expression).Magnitude.Should().Be(magnitude);

    [TestCase("[[[[0,7],4],[15,[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]")]
    [TestCase("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]")]
    public void Can_Split(string expression, string updated)
    {
        var node = Pair.Parse(expression);
        node.Split();
        node.ToString().Should().Be(updated);
    }

    [TestCase("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]")]
    [TestCase("[[[[0,7],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[15,[0,13]]],[1,1]]")]
    [TestCase("[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")]
    [TestCase(
        "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
        "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]")]
    [TestCase(
        "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
        "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]")]
    [TestCase(
        "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
        "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]")]
    [TestCase(
        "[[[[0,1],7],[[11,0],[8,6]]],[[[[2,0],5],7],[[[3,1],[2,6]],[[0,8],6]]]]",
        "[[[[0,1],7],[[11,0],[8,8]]],[[[0,5],7],[[[3,1],[2,6]],[[0,8],6]]]]")]
    [TestCase(
        "[[[[7,14],[13,0]],[[[14,9],[8,9]],[[9,8],[0,8]]]],[[9,[9,8]],[[1,[9,1]],[2,5]]]]",
        "[[[[7,14],[13,14]],[[0,[17,9]],[[9,8],[0,8]]]],[[9,[9,8]],[[1,[9,1]],[2,5]]]]")]
    public void Can_Explode(string expression, string updated)
    {
        var node = Pair.Parse(expression);
        node.Explode();
        node.ToString().Should().Be(updated);
    }

    [TestCase("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")]
    [TestCase(
        "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
        "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]")]
    public void Can_Reduce(string expression, string updated)
        => Pair.Parse(expression).Reduce().ToString().Should().Be(updated);
}
